cc1에 의한 어셈블리 소스 파일로 컴파일

3가지 동작을 한다.
    1. front-end
    2. middle-end
    3. back-end

front-end
    언어 종속적인 부분을 처리하는 일이다.
    전체적으로 하는일은 소스코드가 올바르게 작성되었는지 분석하고
    중단부에 넘겨주기 위한 GIMPLE 트리 ( 소스코드를 트리 형태로 표현한 자료구조)를 생성하는 일이다.

middle-end
    GIMPLE트리를 이용해 아키텍처 비종속적인 최적화를 수행한다.
    최종적으로 후단부에서 사용하는 RTL( Register Transfer Language ) : 고급언어와 어셈블리 언어의 중간 형태
    를 생성한다.
    cc1에서 수행하는 최적화 중 많은 최적화가 중단부에서 이뤄진다. 
    결론 : 아키텍처 비종속적인 최적화!!

back-end
    아케텍처 종속적인 최적화가 수행된다. 그리고 최적화가 완료되면 목적 코드를 생성한다.
    여기서 목적 코드는 어셈블리 코드를 의미한다. 인스트럭션 스케줄링, 레지스터 할당과 같은 중요한 일이 수행된다.


front-end에서 하는일 심화
    C 소스 코드를 입력받아 문법상, 의미상의 오류를 파악하고, 트리 형태의 중간 표현 (IR : Intermediate Representation )인 GIMPLE 트리를 생성한다.
    1. 어휘 분석
    2. 구문 분석
    3. 의미 분석
    4. 중간 표현 생성

    어휘 분석 ( scanner ) 
        C 소스 코드를 의미가 있는 가장 최소 단위로 나누는 일이다.
        전처리가 된 like.i 소스 코드는 스캐너에 의해 읽혀지면서 소스코드를 문법적으로 의미가 있는 가장 최소 단위로 나눈다. 이런 문법적으로 의미 있는 가장 최소 단위의 문자열을 토큰이라 부르고, 종류는 아래와 같다
            # 지정어 ( if, while, for, do, switch, case 등 )
            # 연산 기호 ( +, -, *, /, %, <, >, = 등 )
            # 구분자 ( (, [, ,, ;, : 등 )
            # 명칭 ( main, print, var 등 )
            # 상수 ( 1203, 120.3, "I like you!\n" 등 )
        어휘분석은 해당 토큰들로 소스를 나누고 토큰을 하나씩 구문 분석을 담당하는 파서에게 넘긴다.

    구문 분석 ( parser )
        프로그램의 문법상 오류를 찾아내는 일을한다.
        like.c 파일에 문법적인 오류가 있었다면 이 단계에서 걸러진다. ( parser : 구문 분석기 )
        스캐너에게서 넘겨받은 토큰을 파스 트리를 만들면서 문법적 오류가 있는지 체크한다.

    의미 분석
        문법상의 오류는 없지만 의미상 오류가 있는것을 체크한다.
        선언되지 않은 변수를 사용했다거나, 함수를 사용하는 데 있어 인자 개수나 인자형이 불일치했다거나, 그리고 변수 사용에 있어 자료형이 불일치한 것 등이 의미 분석 단계에서 체크하는 것들이다.
        Scanner와 Parser에 의해 생성된 Symbol Table을 이용해 이런 일들을 수행한다.
        이 단계에서 C 소스파일 내에서 잘못 사용된 문법이나 오타, 잘못 사용된 함수, 정의되지 않은 변수의 사용 같은 오류들이 모두 걸러진다.

    중간 표현 생성
        거의 모든 컴파일러는 언어 종속적인 부분과 기계 종속적인 부분을 부리해 컴파일러를 모듈화하고 최적화를 쉽게 하기 위해 중간 표현을 사용한다.
        cc1은 내부적으로 두 가지 종류의 중간 표현을 사용하는데 하나는 GIMPLE트리이고, 다른 하나는 back-end에서 사용하는 RTL( Register Transfer Language )이다.

        GIMPLE 트리
            언어 독립적인 특성을 제공하기 위해 사용하는 트리 형태의 중간 표현
        RTL 트리
            기계 독립적인 특성을 제공하기 위해 사용하는 거의 어셈블리 수준의 중간 표현이다.

        GIMPLE 트리는 여러 프로그래밍 언어 소스를 공통된 언어 표현으로 바꾼 후 소스 코드를 트리 형태로 표현한 것이다.
        GIMPLE은 각언어의 AST(Abstract Syntax Tree) -> GENERIC tree -> GIMPLE tree 의 과정으로 생성된다.
        AST는 구문 분석( Parser )에 의해 생성된 파스트리를 간소화한 트리이다.


    
